generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(cuid())
  name           String
  username       String        @unique
  email          String        @unique
  password       String
  avatar         String?
  friendRequests Friend[]      @relation("friend_requests")
  friends        Friend[]      @relation("friends")
  rooms          UsersInRoom[]
  chatSent       Chat[]        @relation("chat_sender")
  chatReceived   Chat[]        @relation("chat_receiver")
}

model Friend {
  userId   String
  friendId String
  status   FriendStatus @default(PENDING)
  friend   User         @relation("friend_requests", fields: [friendId], references: [id], onDelete: Cascade)
  user     User         @relation("friends", fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, friendId])
}

enum FriendStatus {
  PENDING
  CONFIRMED
}

model UsersInRoom {
  userId String
  roomId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  room   Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@id([userId, roomId])
}

model Room {
  id    String        @id @default(uuid())
  users UsersInRoom[]
  chats Chat[]
}

model Chat {
  id         String   @id @default(cuid())
  message    String
  createdAt  DateTime @default(now())
  senderId   String
  receiverId String
  roomId     String
  room       Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  sender     User     @relation("chat_sender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User     @relation("chat_receiver", fields: [receiverId], references: [id], onDelete: Cascade)
}
